
buildscript {
    dependencies {
        classpath 'org.postgresql:postgresql:42.2.6'
    }
}

plugins {
    id 'org.springframework.boot' version '2.1.7.RELEASE'
    id 'org.flywaydb.flyway' version '6.0.0-beta2'
    id 'jacoco' // core plugin provided by gradle
}

// https://docs.gradle.org/current/userguide/jacoco_plugin.html
jacoco {
    toolVersion = "0.8.4"
//    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/html")
    }
}

flyway {
    
    // get properties for server and flyway from the same place 
    def props = new Properties()
    file("application.properties").withInputStream { props.load(it) }
    
    url = props.getProperty("spring.datasource.url") // 'jdbc:postgresql://localhost:5555/app'
    user = props.getProperty("spring.datasource.username") //'postgres'
    password = props.getProperty("spring.datasource.password") //'postgres'
    schemas = ['public']
}

dependencies {

//    implementation 'javax.inject:javax.inject:1'
    implementation 'org.postgresql:postgresql:42.2.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.1.7.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.1.7.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.1.7.RELEASE'
}
 
// clear the database, rebuild, and run with fresh database
task cleanRun(type: GradleBuild) {
    tasks = ['clean', 'flywayClean', 'flywayMigrate', 'bootRun']
}